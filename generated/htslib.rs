/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    storage: Storage,
    align: [Align; 0],
}

impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }

    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());

        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];

        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };

        let mask = 1 << bit_index;

        byte & mask == mask
    }

    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());

        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];

        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };

        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }

    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());

        let mut val = 0;

        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }

        val
    }

    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());

        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const __GNUC_VA_LIST: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: f64 = 200809.0;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: f64 = 201505.0;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 23;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const _BITS_WCHAR_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: f64 = -9223372036854776000.0;
pub const INT_FAST32_MIN: f64 = -9223372036854776000.0;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: f64 = 9223372036854776000.0;
pub const INT_FAST32_MAX: f64 = 9223372036854776000.0;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: f64 = -9223372036854776000.0;
pub const INTPTR_MAX: f64 = 9223372036854776000.0;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: f64 = -9223372036854776000.0;
pub const PTRDIFF_MAX: f64 = 9223372036854776000.0;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _SYS_TYPES_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const __clock_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const _SIGSET_H_types: u32 = 1;
pub const __timespec_defined: u32 = 1;
pub const _STRUCT_TIMEVAL: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _SYS_SYSMACROS_H: u32 = 1;
pub const _BITS_PTHREADTYPES_H: u32 = 1;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __have_pthread_attr_t: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
pub const HTS_IDX_NOCOOR: i32 = -2;
pub const HTS_IDX_START: i32 = -3;
pub const HTS_IDX_REST: i32 = -4;
pub const HTS_IDX_NONE: i32 = -5;
pub const HTS_FMT_CSI: u32 = 0;
pub const HTS_FMT_BAI: u32 = 1;
pub const HTS_FMT_TBI: u32 = 2;
pub const HTS_FMT_CRAI: u32 = 3;
pub const HTS_PARSE_THOUSANDS_SEP: u32 = 1;
pub const FT_UNKN: u32 = 0;
pub const FT_GZ: u32 = 1;
pub const FT_VCF: u32 = 2;
pub const FT_VCF_GZ: u32 = 3;
pub const FT_BCF: u32 = 4;
pub const FT_BCF_GZ: u32 = 5;
pub const FT_STDIN: u32 = 8;
pub const BAM_CMATCH: u32 = 0;
pub const BAM_CINS: u32 = 1;
pub const BAM_CDEL: u32 = 2;
pub const BAM_CREF_SKIP: u32 = 3;
pub const BAM_CSOFT_CLIP: u32 = 4;
pub const BAM_CHARD_CLIP: u32 = 5;
pub const BAM_CPAD: u32 = 6;
pub const BAM_CEQUAL: u32 = 7;
pub const BAM_CDIFF: u32 = 8;
pub const BAM_CBACK: u32 = 9;
pub const BAM_CIGAR_STR: &'static [u8; 11usize] = b"MIDNSHP=XB\0";
pub const BAM_CIGAR_SHIFT: u32 = 4;
pub const BAM_CIGAR_MASK: u32 = 15;
pub const BAM_CIGAR_TYPE: u32 = 246183;
pub const BAM_FPAIRED: u32 = 1;
pub const BAM_FPROPER_PAIR: u32 = 2;
pub const BAM_FUNMAP: u32 = 4;
pub const BAM_FMUNMAP: u32 = 8;
pub const BAM_FREVERSE: u32 = 16;
pub const BAM_FMREVERSE: u32 = 32;
pub const BAM_FREAD1: u32 = 64;
pub const BAM_FREAD2: u32 = 128;
pub const BAM_FSECONDARY: u32 = 256;
pub const BAM_FQCFAIL: u32 = 512;
pub const BAM_FDUP: u32 = 1024;
pub const BAM_FSUPPLEMENTARY: u32 = 2048;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gnu_dev_major(__dev: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_minor(__dev: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_makedev(
        __major: ::std::os::raw::c_uint,
        __minor: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulonglong;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: pthread_mutex_t___pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_mutex_t___pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: pthread_cond_t__bindgen_ty_1,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_cond_t__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: pthread_rwlock_t__bindgen_ty_1,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_rwlock_t__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: f64,
}
///< All logging disabled.
pub const htsLogLevel_HTS_LOG_OFF: htsLogLevel = 0;
///< Logging of errors only.
pub const htsLogLevel_HTS_LOG_ERROR: htsLogLevel = 1;
///< Logging of errors and warnings.
pub const htsLogLevel_HTS_LOG_WARNING: htsLogLevel = 3;
///< Logging of errors, warnings, and normal but significant events.
pub const htsLogLevel_HTS_LOG_INFO: htsLogLevel = 4;
///< Logging of all except the most detailed debug events.
pub const htsLogLevel_HTS_LOG_DEBUG: htsLogLevel = 5;
///< All logging enabled.
pub const htsLogLevel_HTS_LOG_TRACE: htsLogLevel = 6;
/// Log levels.
pub type htsLogLevel = u32;
extern "C" {
    /// Sets the selected log level.
    pub fn hts_set_log_level(level: htsLogLevel);
}
extern "C" {
    /// Gets the selected log level.
    pub fn hts_get_log_level() -> htsLogLevel;
}
extern "C" {
    #[link_name = "\u{1}hts_verbose"]
    pub static mut hts_verbose: ::std::os::raw::c_int;
}
extern "C" {
    /// Logs an event.
    /// \param severity      Severity of the event:
    ///                      - HTS_LOG_ERROR means that something went wrong so that a task could not be completed.
    ///                      - HTS_LOG_WARNING means that something unexpected happened, but that execution can continue, perhaps in a degraded mode.
    ///                      - HTS_LOG_INFO means that something normal but significant happened.
    ///                      - HTS_LOG_DEBUG means that something normal and insignificant happened.
    ///                      - HTS_LOG_TRACE means that something happened that might be of interest when troubleshooting.
    /// \param context       Context where the event occurred. Typically set to "__func__".
    /// \param format        Format string with placeholders, like printf.
    pub fn hts_log(
        severity: htsLogLevel,
        context: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        ...
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BGZF {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cram_fd {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hFILE {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hts_tpool {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kstring_t {
    pub l: usize,
    pub m: usize,
    pub s: *mut ::std::os::raw::c_char,
}
pub type kstring_t = __kstring_t;
pub const htsFormatCategory_unknown_category: htsFormatCategory = 0;
pub const htsFormatCategory_sequence_data: htsFormatCategory = 1;
pub const htsFormatCategory_variant_data: htsFormatCategory = 2;
pub const htsFormatCategory_index_file: htsFormatCategory = 3;
pub const htsFormatCategory_region_list: htsFormatCategory = 4;
pub const htsFormatCategory_category_maximum: htsFormatCategory = 32767;
/// File I/O *
pub type htsFormatCategory = u32;
pub const htsExactFormat_unknown_format: htsExactFormat = 0;
pub const htsExactFormat_binary_format: htsExactFormat = 1;
pub const htsExactFormat_text_format: htsExactFormat = 2;
pub const htsExactFormat_sam: htsExactFormat = 3;
pub const htsExactFormat_bam: htsExactFormat = 4;
pub const htsExactFormat_bai: htsExactFormat = 5;
pub const htsExactFormat_cram: htsExactFormat = 6;
pub const htsExactFormat_crai: htsExactFormat = 7;
pub const htsExactFormat_vcf: htsExactFormat = 8;
pub const htsExactFormat_bcf: htsExactFormat = 9;
pub const htsExactFormat_csi: htsExactFormat = 10;
pub const htsExactFormat_gzi: htsExactFormat = 11;
pub const htsExactFormat_tbi: htsExactFormat = 12;
pub const htsExactFormat_bed: htsExactFormat = 13;
pub const htsExactFormat_htsget: htsExactFormat = 14;
pub const htsExactFormat_json: htsExactFormat = 14;
pub const htsExactFormat_format_maximum: htsExactFormat = 32767;
pub type htsExactFormat = u32;
pub const htsCompression_no_compression: htsCompression = 0;
pub const htsCompression_gzip: htsCompression = 1;
pub const htsCompression_bgzf: htsCompression = 2;
pub const htsCompression_custom: htsCompression = 3;
pub const htsCompression_compression_maximum: htsCompression = 32767;
pub type htsCompression = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct htsFormat {
    pub category: htsFormatCategory,
    pub format: htsExactFormat,
    pub version: htsFormat__bindgen_ty_1,
    pub compression: htsCompression,
    pub compression_level: ::std::os::raw::c_short,
    pub specific: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct htsFormat__bindgen_ty_1 {
    pub major: ::std::os::raw::c_short,
    pub minor: ::std::os::raw::c_short,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct htsFile {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub lineno: i64,
    pub line: kstring_t,
    pub fn_: *mut ::std::os::raw::c_char,
    pub fn_aux: *mut ::std::os::raw::c_char,
    pub fp: htsFile__bindgen_ty_1,
    pub format: htsFormat,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union htsFile__bindgen_ty_1 {
    pub bgzf: *mut BGZF,
    pub cram: *mut cram_fd,
    pub hfile: *mut hFILE,
    _bindgen_union_align: u64,
}
impl htsFile {
    #[inline]
    pub fn is_bin(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_bin(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_write(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_write(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_be(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_be(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_cram(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_cram(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_bgzf(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_bgzf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dummy(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 27u8) as u32) }
    }
    #[inline]
    pub fn set_dummy(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 27u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        is_bin: u32,
        is_write: u32,
        is_be: u32,
        is_cram: u32,
        is_bgzf: u32,
        dummy: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let is_bin: u32 = unsafe { ::std::mem::transmute(is_bin) };
            is_bin as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let is_write: u32 = unsafe { ::std::mem::transmute(is_write) };
            is_write as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let is_be: u32 = unsafe { ::std::mem::transmute(is_be) };
            is_be as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let is_cram: u32 = unsafe { ::std::mem::transmute(is_cram) };
            is_cram as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let is_bgzf: u32 = unsafe { ::std::mem::transmute(is_bgzf) };
            is_bgzf as u64
        });
        __bindgen_bitfield_unit.set(5usize, 27u8, {
            let dummy: u32 = unsafe { ::std::mem::transmute(dummy) };
            dummy as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct htsThreadPool {
    pub pool: *mut hts_tpool,
    pub qsize: ::std::os::raw::c_int,
}
pub const sam_fields_SAM_QNAME: sam_fields = 1;
pub const sam_fields_SAM_FLAG: sam_fields = 2;
pub const sam_fields_SAM_RNAME: sam_fields = 4;
pub const sam_fields_SAM_POS: sam_fields = 8;
pub const sam_fields_SAM_MAPQ: sam_fields = 16;
pub const sam_fields_SAM_CIGAR: sam_fields = 32;
pub const sam_fields_SAM_RNEXT: sam_fields = 64;
pub const sam_fields_SAM_PNEXT: sam_fields = 128;
pub const sam_fields_SAM_TLEN: sam_fields = 256;
pub const sam_fields_SAM_SEQ: sam_fields = 512;
pub const sam_fields_SAM_QUAL: sam_fields = 1024;
pub const sam_fields_SAM_AUX: sam_fields = 2048;
pub const sam_fields_SAM_RGAUX: sam_fields = 4096;
pub type sam_fields = u32;
pub const hts_fmt_option_CRAM_OPT_DECODE_MD: hts_fmt_option = 0;
pub const hts_fmt_option_CRAM_OPT_PREFIX: hts_fmt_option = 1;
pub const hts_fmt_option_CRAM_OPT_VERBOSITY: hts_fmt_option = 2;
pub const hts_fmt_option_CRAM_OPT_SEQS_PER_SLICE: hts_fmt_option = 3;
pub const hts_fmt_option_CRAM_OPT_SLICES_PER_CONTAINER: hts_fmt_option = 4;
pub const hts_fmt_option_CRAM_OPT_RANGE: hts_fmt_option = 5;
pub const hts_fmt_option_CRAM_OPT_VERSION: hts_fmt_option = 6;
pub const hts_fmt_option_CRAM_OPT_EMBED_REF: hts_fmt_option = 7;
pub const hts_fmt_option_CRAM_OPT_IGNORE_MD5: hts_fmt_option = 8;
pub const hts_fmt_option_CRAM_OPT_REFERENCE: hts_fmt_option = 9;
pub const hts_fmt_option_CRAM_OPT_MULTI_SEQ_PER_SLICE: hts_fmt_option = 10;
pub const hts_fmt_option_CRAM_OPT_NO_REF: hts_fmt_option = 11;
pub const hts_fmt_option_CRAM_OPT_USE_BZIP2: hts_fmt_option = 12;
pub const hts_fmt_option_CRAM_OPT_SHARED_REF: hts_fmt_option = 13;
pub const hts_fmt_option_CRAM_OPT_NTHREADS: hts_fmt_option = 14;
pub const hts_fmt_option_CRAM_OPT_THREAD_POOL: hts_fmt_option = 15;
pub const hts_fmt_option_CRAM_OPT_USE_LZMA: hts_fmt_option = 16;
pub const hts_fmt_option_CRAM_OPT_USE_RANS: hts_fmt_option = 17;
pub const hts_fmt_option_CRAM_OPT_REQUIRED_FIELDS: hts_fmt_option = 18;
pub const hts_fmt_option_CRAM_OPT_LOSSY_NAMES: hts_fmt_option = 19;
pub const hts_fmt_option_CRAM_OPT_BASES_PER_SLICE: hts_fmt_option = 20;
pub const hts_fmt_option_HTS_OPT_COMPRESSION_LEVEL: hts_fmt_option = 100;
pub const hts_fmt_option_HTS_OPT_NTHREADS: hts_fmt_option = 101;
pub const hts_fmt_option_HTS_OPT_THREAD_POOL: hts_fmt_option = 102;
pub const hts_fmt_option_HTS_OPT_CACHE_SIZE: hts_fmt_option = 103;
pub const hts_fmt_option_HTS_OPT_BLOCK_SIZE: hts_fmt_option = 104;
pub type hts_fmt_option = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hts_opt {
    pub arg: *mut ::std::os::raw::c_char,
    pub opt: hts_fmt_option,
    pub val: hts_opt__bindgen_ty_1,
    pub next: *mut hts_opt,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union hts_opt__bindgen_ty_1 {
    pub i: ::std::os::raw::c_int,
    pub s: *mut ::std::os::raw::c_char,
    _bindgen_union_align: u64,
}
extern "C" {
    pub fn hts_opt_add(
        opts: *mut *mut hts_opt,
        c_arg: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hts_opt_apply(fp: *mut htsFile, opts: *mut hts_opt) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hts_opt_free(opts: *mut hts_opt);
}
extern "C" {
    pub fn hts_parse_format(
        opt: *mut htsFormat,
        str: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hts_parse_opt_list(
        opt: *mut htsFormat,
        str: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}seq_nt16_table"]
    pub static mut seq_nt16_table: [::std::os::raw::c_uchar; 256usize];
}
extern "C" {
    #[link_name = "\u{1}seq_nt16_str"]
    pub static mut seq_nt16_str: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    #[link_name = "\u{1}seq_nt16_int"]
    pub static mut seq_nt16_int: [::std::os::raw::c_int; 0usize];
}
extern "C" {
    ///@abstract  Get the htslib version number
    ///@return    For released versions, a string like "N.N[.N]"; or git describe
    ///output if using a library built within a Git repository.
    pub fn hts_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    ///@abstract    Determine format by peeking at the start of a file
    ///@param fp    File opened for reading, positioned at the beginning
    ///@param fmt   Format structure that will be filled out on return
    ///@return      0 for success, or negative if an error occurred.
    pub fn hts_detect_format(fp: *mut hFILE, fmt: *mut htsFormat) -> ::std::os::raw::c_int;
}
extern "C" {
    ///@abstract    Get a human-readable description of the file format
    ///@param fmt   Format structure holding type, version, compression, etc.
    ///@return      Description string, to be freed by the caller after use.
    pub fn hts_format_description(format: *const htsFormat) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    ///@abstract       Open a SAM/BAM/CRAM/VCF/BCF/etc file
    ///@param fn       The file name or "-" for stdin/stdout
    ///@param mode     Mode matching / [rwa][bceguxz0-9]* /
    ///@discussion
    ///With 'r' opens for reading; any further format mode letters are ignored
    ///as the format is detected by checking the first few bytes or BGZF blocks
    ///of the file.  With 'w' or 'a' opens for writing or appending, with format
    ///specifier letters:
    ///b  binary format (BAM, BCF, etc) rather than text (SAM, VCF, etc)
    ///c  CRAM format
    ///g  gzip compressed
    ///u  uncompressed
    ///z  bgzf compressed
    ///[0-9]  zlib compression level
    ///and with non-format option letters (for any of 'r'/'w'/'a'):
    ///e  close the file on exec(2) (opens with O_CLOEXEC, where supported)
    ///x  create the file exclusively (opens with O_EXCL, where supported)
    ///Note that there is a distinction between 'u' and '0': the first yields
    ///plain uncompressed output whereas the latter outputs uncompressed data
    ///wrapped in the zlib format.
    ///@example
    ///[rw]b  .. compressed BCF, BAM, FAI
    ///[rw]bu .. uncompressed BCF
    ///[rw]z  .. compressed VCF
    ///[rw]   .. uncompressed VCF
    pub fn hts_open(
        fn_: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> *mut htsFile;
}
extern "C" {
    ///@abstract       Open a SAM/BAM/CRAM/VCF/BCF/etc file
    ///@param fn       The file name or "-" for stdin/stdout
    ///@param mode     Open mode, as per hts_open()
    ///@param fmt      Optional format specific parameters
    ///@discussion
    ///See hts_open() for description of fn and mode.
    ///// TODO Update documentation for s/opts/fmt/
    ///Opts contains a format string (sam, bam, cram, vcf, bcf) which will,
    ///if defined, override mode.  Opts also contains a linked list of hts_opt
    ///structures to apply to the open file handle.  These can contain things
    ///like pointers to the reference or information on compression levels,
    ///block sizes, etc.
    pub fn hts_open_format(
        fn_: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
        fmt: *const htsFormat,
    ) -> *mut htsFile;
}
extern "C" {
    ///@abstract       Open an existing stream as a SAM/BAM/CRAM/VCF/BCF/etc file
    ///@param fn       The already-open file handle
    ///@param mode     Open mode, as per hts_open()
    pub fn hts_hopen(
        fp: *mut hFILE,
        fn_: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> *mut htsFile;
}
extern "C" {
    ///@abstract  Close a file handle, flushing buffered data for output streams
    ///@param fp  The file handle to be closed
    ///@return    0 for success, or negative if an error occurred.
    pub fn hts_close(fp: *mut htsFile) -> ::std::os::raw::c_int;
}
extern "C" {
    ///@abstract  Returns the file's format information
    ///@param fp  The file handle
    ///@return    Read-only pointer to the file's htsFormat.
    pub fn hts_get_format(fp: *mut htsFile) -> *const htsFormat;
}
extern "C" {
    ///@ abstract      Returns a string containing the file format extension.
    ///@ param format  Format structure containing the file type.
    ///@ return        A string ("sam", "bam", etc) or "?" for unknown formats.
    pub fn hts_format_file_extension(format: *const htsFormat) -> *const ::std::os::raw::c_char;
}
extern "C" {
    ///@abstract  Sets a specified CRAM option on the open file handle.
    ///@param fp  The file handle open the open file.
    ///@param opt The CRAM_OPT_* option.
    ///@param ... Optional arguments, dependent on the option used.
    ///@return    0 for success, or negative if an error occurred.
    pub fn hts_set_opt(fp: *mut htsFile, opt: hts_fmt_option, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hts_getline(
        fp: *mut htsFile,
        delimiter: ::std::os::raw::c_int,
        str: *mut kstring_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hts_readlines(
        fn_: *const ::std::os::raw::c_char,
        _n: *mut ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    ///@abstract       Parse comma-separated list or read list from a file
    ///@param list     File name or comma-separated list
    ///@param is_file
    ///@param _n       Size of the output array (number of items read)
    ///@return         NULL on failure or pointer to newly allocated array of
    ///strings
    pub fn hts_readlist(
        fn_: *const ::std::os::raw::c_char,
        is_file: ::std::os::raw::c_int,
        _n: *mut ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    ///@abstract  Create extra threads to aid compress/decompression for this file
    ///@param fp  The file handle
    ///@param n   The number of worker threads to create
    ///@return    0 for success, or negative if an error occurred.
    ///@notes     This function creates non-shared threads for use solely by fp.
    ///The hts_set_thread_pool function is the recommended alternative.
    pub fn hts_set_threads(fp: *mut htsFile, n: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    ///@abstract  Create extra threads to aid compress/decompression for this file
    ///@param fp  The file handle
    ///@param p   A pool of worker threads, previously allocated by hts_create_threads().
    ///@return    0 for success, or negative if an error occurred.
    pub fn hts_set_thread_pool(fp: *mut htsFile, p: *mut htsThreadPool) -> ::std::os::raw::c_int;
}
extern "C" {
    ///@abstract  Adds a cache of decompressed blocks, potentially speeding up seeks.
    ///This may not work for all file types (currently it is bgzf only).
    ///@param fp  The file handle
    ///@param n   The size of cache, in bytes
    pub fn hts_set_cache_size(fp: *mut htsFile, n: ::std::os::raw::c_int);
}
extern "C" {
    ///@abstract  Set .fai filename for a file opened for reading
    ///@return    0 for success, negative on failure
    ///@discussion
    ///Called before *_hdr_read(), this provides the name of a .fai file
    ///used to provide a reference list if the htsFile contains no @SQ headers.
    pub fn hts_set_fai_filename(
        fp: *mut htsFile,
        fn_aux: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    ///@abstract  Determine whether a given htsFile contains a valid EOF block
    ///@return    3 for a non-EOF checkable filetype;
    ///2 for an unseekable file type where EOF cannot be checked;
    ///1 for a valid EOF block;
    ///0 for if the EOF marker is absent when it should be present;
    ///-1 (with errno set) on failure
    ///@discussion
    ///Check if the BGZF end-of-file (EOF) marker is present
    pub fn hts_check_EOF(fp: *mut htsFile) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __hts_idx_t {
    _unused: [u8; 0],
}
pub type hts_idx_t = __hts_idx_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hts_pair32_t {
    pub beg: u32,
    pub end: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hts_pair64_t {
    pub u: u64,
    pub v: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hts_pair64_max_t {
    pub u: u64,
    pub v: u64,
    pub max: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hts_reglist_t {
    pub reg: *const ::std::os::raw::c_char,
    pub tid: ::std::os::raw::c_int,
    pub intervals: *mut hts_pair32_t,
    pub count: u32,
    pub min_beg: u32,
    pub max_end: u32,
}
pub type hts_readrec_func = ::std::option::Option<
    unsafe extern "C" fn(
        fp: *mut BGZF,
        data: *mut ::std::os::raw::c_void,
        r: *mut ::std::os::raw::c_void,
        tid: *mut ::std::os::raw::c_int,
        beg: *mut ::std::os::raw::c_int,
        end: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type hts_seek_func = ::std::option::Option<
    unsafe extern "C" fn(
        fp: *mut ::std::os::raw::c_void,
        offset: i64,
        where_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type hts_tell_func =
    ::std::option::Option<unsafe extern "C" fn(fp: *mut ::std::os::raw::c_void) -> i64>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hts_itr_t {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub tid: ::std::os::raw::c_int,
    pub beg: ::std::os::raw::c_int,
    pub end: ::std::os::raw::c_int,
    pub n_off: ::std::os::raw::c_int,
    pub i: ::std::os::raw::c_int,
    pub curr_tid: ::std::os::raw::c_int,
    pub curr_beg: ::std::os::raw::c_int,
    pub curr_end: ::std::os::raw::c_int,
    pub curr_off: u64,
    pub off: *mut hts_pair64_t,
    pub readrec: hts_readrec_func,
    pub bins: hts_itr_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hts_itr_t__bindgen_ty_1 {
    pub n: ::std::os::raw::c_int,
    pub m: ::std::os::raw::c_int,
    pub a: *mut ::std::os::raw::c_int,
}
impl hts_itr_t {
    #[inline]
    pub fn read_rest(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_read_rest(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn finished(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_finished(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_cram(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_cram(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dummy(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 29u8) as u32) }
    }
    #[inline]
    pub fn set_dummy(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 29u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        read_rest: u32,
        finished: u32,
        is_cram: u32,
        dummy: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let read_rest: u32 = unsafe { ::std::mem::transmute(read_rest) };
            read_rest as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let finished: u32 = unsafe { ::std::mem::transmute(finished) };
            finished as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let is_cram: u32 = unsafe { ::std::mem::transmute(is_cram) };
            is_cram as u64
        });
        __bindgen_bitfield_unit.set(3usize, 29u8, {
            let dummy: u32 = unsafe { ::std::mem::transmute(dummy) };
            dummy as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aux_key_t {
    pub key: ::std::os::raw::c_int,
    pub min_off: u64,
    pub max_off: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hts_itr_multi_t {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub reg_list: *mut hts_reglist_t,
    pub n_reg: ::std::os::raw::c_int,
    pub i: ::std::os::raw::c_int,
    pub curr_tid: ::std::os::raw::c_int,
    pub curr_intv: ::std::os::raw::c_int,
    pub curr_beg: ::std::os::raw::c_int,
    pub curr_end: ::std::os::raw::c_int,
    pub curr_reg: ::std::os::raw::c_int,
    pub off: *mut hts_pair64_max_t,
    pub n_off: ::std::os::raw::c_int,
    pub curr_off: u64,
    pub nocoor_off: u64,
    pub readrec: hts_readrec_func,
    pub seek: hts_seek_func,
    pub tell: hts_tell_func,
}
impl hts_itr_multi_t {
    #[inline]
    pub fn read_rest(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_read_rest(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn finished(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_finished(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_cram(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_cram(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn nocoor(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_nocoor(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dummy(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_dummy(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        read_rest: u32,
        finished: u32,
        is_cram: u32,
        nocoor: u32,
        dummy: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let read_rest: u32 = unsafe { ::std::mem::transmute(read_rest) };
            read_rest as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let finished: u32 = unsafe { ::std::mem::transmute(finished) };
            finished as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let is_cram: u32 = unsafe { ::std::mem::transmute(is_cram) };
            is_cram as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let nocoor: u32 = unsafe { ::std::mem::transmute(nocoor) };
            nocoor as u64
        });
        __bindgen_bitfield_unit.set(4usize, 28u8, {
            let dummy: u32 = unsafe { ::std::mem::transmute(dummy) };
            dummy as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn hts_idx_init(
        n: ::std::os::raw::c_int,
        fmt: ::std::os::raw::c_int,
        offset0: u64,
        min_shift: ::std::os::raw::c_int,
        n_lvls: ::std::os::raw::c_int,
    ) -> *mut hts_idx_t;
}
extern "C" {
    pub fn hts_idx_destroy(idx: *mut hts_idx_t);
}
extern "C" {
    pub fn hts_idx_push(
        idx: *mut hts_idx_t,
        tid: ::std::os::raw::c_int,
        beg: ::std::os::raw::c_int,
        end: ::std::os::raw::c_int,
        offset: u64,
        is_mapped: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hts_idx_finish(idx: *mut hts_idx_t, final_offset: u64);
}
extern "C" {
    /// Save an index to a file
    ///** @param idx  Index to be written
    ///@param fn   Input BAM/BCF/etc filename, to which .bai/.csi/etc will be added
    ///@param fmt  One of the HTS_FMT_* index formats
    ///@return  0 if successful, or negative if an error occurred.
    ///*/
    pub fn hts_idx_save(
        idx: *const hts_idx_t,
        fn_: *const ::std::os::raw::c_char,
        fmt: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Save an index to a specific file
    ///** @param idx    Index to be written
    ///@param fn     Input BAM/BCF/etc filename
    ///@param fnidx  Output filename, or NULL to add .bai/.csi/etc to @a fn
    ///@param fmt    One of the HTS_FMT_* index formats
    ///@return  0 if successful, or negative if an error occurred.
    ///*/
    pub fn hts_idx_save_as(
        idx: *const hts_idx_t,
        fn_: *const ::std::os::raw::c_char,
        fnidx: *const ::std::os::raw::c_char,
        fmt: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Load an index file
    ///** @param fn   BAM/BCF/etc filename, to which .bai/.csi/etc will be added or
    ///the extension substituted, to search for an existing index file
    ///@param fmt  One of the HTS_FMT_* index formats
    ///@return  The index, or NULL if an error occurred.
    ///*/
    pub fn hts_idx_load(
        fn_: *const ::std::os::raw::c_char,
        fmt: ::std::os::raw::c_int,
    ) -> *mut hts_idx_t;
}
extern "C" {
    /// Load a specific index file
    ///** @param fn     Input BAM/BCF/etc filename
    ///@param fnidx  The input index filename
    ///@return  The index, or NULL if an error occurred.
    ///*/
    pub fn hts_idx_load2(
        fn_: *const ::std::os::raw::c_char,
        fnidx: *const ::std::os::raw::c_char,
    ) -> *mut hts_idx_t;
}
extern "C" {
    /// Get extra index meta-data
    ///** @param idx    The index
    ///@param l_meta Pointer to where the length of the extra data is stored
    ///@return Pointer to the extra data if present; NULL otherwise
    ///
    ///Indexes (both .tbi and .csi) made by tabix include extra data about
    ///the indexed file.  The returns a pointer to this data.  Note that the
    ///data is stored exactly as it is in the index.  Callers need to interpret
    ///the results themselves, including knowing what sort of data to expect;
    ///byte swapping etc.
    ///*/
    pub fn hts_idx_get_meta(idx: *mut hts_idx_t, l_meta: *mut u32) -> *mut u8;
}
extern "C" {
    /// Set extra index meta-data
    ///** @param idx     The index
    ///@param l_meta  Length of data
    ///@param meta    Pointer to the extra data
    ///@param is_copy If not zero, a copy of the data is taken
    ///@return 0 on success; -1 on failure (out of memory).
    ///
    ///Sets the data that is returned by hts_idx_get_meta().
    ///
    ///If is_copy != 0, a copy of the input data is taken.  If not, ownership of
    ///the data pointed to by *meta passes to the index.
    ///*/
    pub fn hts_idx_set_meta(
        idx: *mut hts_idx_t,
        l_meta: u32,
        meta: *mut u8,
        is_copy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hts_idx_get_stat(
        idx: *const hts_idx_t,
        tid: ::std::os::raw::c_int,
        mapped: *mut u64,
        unmapped: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hts_idx_get_n_no_coor(idx: *const hts_idx_t) -> u64;
}
extern "C" {
    /// Parse a numeric string
    ///** The number may be expressed in scientific notation, and optionally may
    ///contain commas in the integer part (before any decimal point or E notation).
    ///@param str     String to be parsed
    ///@param strend  If non-NULL, set on return to point to the first character
    ///in @a str after those forming the parsed number
    ///@param flags   Or'ed-together combination of HTS_PARSE_* flags
    ///@return  Converted value of the parsed number.
    ///
    ///When @a strend is NULL, a warning will be printed (if hts_verbose is HTS_LOG_WARNING
    ///or more) if there are any trailing characters after the number.
    ///*/
    pub fn hts_parse_decimal(
        str: *const ::std::os::raw::c_char,
        strend: *mut *mut ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    /// Parse a "CHR:START-END"-style region string
    ///** @param str  String to be parsed
    ///@param beg  Set on return to the 0-based start of the region
    ///@param end  Set on return to the 1-based end of the region
    ///@return  Pointer to the colon or '\0' after the reference sequence name,
    ///or NULL if @a str could not be parsed.
    ///*/
    pub fn hts_parse_reg(
        str: *const ::std::os::raw::c_char,
        beg: *mut ::std::os::raw::c_int,
        end: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn hts_itr_query(
        idx: *const hts_idx_t,
        tid: ::std::os::raw::c_int,
        beg: ::std::os::raw::c_int,
        end: ::std::os::raw::c_int,
        readrec: hts_readrec_func,
    ) -> *mut hts_itr_t;
}
extern "C" {
    pub fn hts_itr_destroy(iter: *mut hts_itr_t);
}
pub type hts_name2id_f = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int,
>;
pub type hts_id2name_f = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_int)
        -> *const ::std::os::raw::c_char,
>;
pub type hts_itr_query_func = ::std::option::Option<
    unsafe extern "C" fn(
        idx: *const hts_idx_t,
        tid: ::std::os::raw::c_int,
        beg: ::std::os::raw::c_int,
        end: ::std::os::raw::c_int,
        readrec: hts_readrec_func,
    ) -> *mut hts_itr_t,
>;
extern "C" {
    pub fn hts_itr_querys(
        idx: *const hts_idx_t,
        reg: *const ::std::os::raw::c_char,
        getid: hts_name2id_f,
        hdr: *mut ::std::os::raw::c_void,
        itr_query: hts_itr_query_func,
        readrec: hts_readrec_func,
    ) -> *mut hts_itr_t;
}
extern "C" {
    pub fn hts_itr_next(
        fp: *mut BGZF,
        iter: *mut hts_itr_t,
        r: *mut ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hts_idx_seqnames(
        idx: *const hts_idx_t,
        n: *mut ::std::os::raw::c_int,
        getid: hts_id2name_f,
        hdr: *mut ::std::os::raw::c_void,
    ) -> *mut *const ::std::os::raw::c_char;
}
/// Iterator with multiple regions *
pub type hts_itr_multi_query_func = ::std::option::Option<
    unsafe extern "C" fn(idx: *const hts_idx_t, itr: *mut hts_itr_multi_t) -> *mut hts_itr_multi_t,
>;
extern "C" {
    pub fn hts_itr_multi_bam(
        idx: *const hts_idx_t,
        iter: *mut hts_itr_multi_t,
    ) -> *mut hts_itr_multi_t;
}
extern "C" {
    pub fn hts_itr_multi_cram(
        idx: *const hts_idx_t,
        iter: *mut hts_itr_multi_t,
    ) -> *mut hts_itr_multi_t;
}
extern "C" {
    pub fn hts_itr_regions(
        idx: *const hts_idx_t,
        reglist: *mut hts_reglist_t,
        count: ::std::os::raw::c_int,
        getid: hts_name2id_f,
        hdr: *mut ::std::os::raw::c_void,
        itr_specific: hts_itr_multi_query_func,
        readrec: hts_readrec_func,
        seek: hts_seek_func,
        tell: hts_tell_func,
    ) -> *mut hts_itr_multi_t;
}
extern "C" {
    pub fn hts_itr_multi_next(
        fd: *mut htsFile,
        iter: *mut hts_itr_multi_t,
        r: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hts_reglist_free(reglist: *mut hts_reglist_t, count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn hts_itr_multi_destroy(iter: *mut hts_itr_multi_t);
}
extern "C" {
    pub fn hts_file_type(fname: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
/// Revised MAQ error model *
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct errmod_t {
    _unused: [u8; 0],
}
extern "C" {
    pub fn errmod_init(depcorr: f64) -> *mut errmod_t;
}
extern "C" {
    pub fn errmod_destroy(em: *mut errmod_t);
}
extern "C" {
    pub fn errmod_cal(
        em: *const errmod_t,
        n: ::std::os::raw::c_int,
        m: ::std::os::raw::c_int,
        bases: *mut u16,
        q: *mut f32,
    ) -> ::std::os::raw::c_int;
}
/// Probabilistic banded glocal alignment *
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct probaln_par_t {
    pub d: f32,
    pub e: f32,
    pub bw: ::std::os::raw::c_int,
}
extern "C" {
    pub fn probaln_glocal(
        ref_: *const u8,
        l_ref: ::std::os::raw::c_int,
        query: *const u8,
        l_query: ::std::os::raw::c_int,
        iqual: *const u8,
        c: *const probaln_par_t,
        state: *mut ::std::os::raw::c_int,
        q: *mut u8,
    ) -> ::std::os::raw::c_int;
}
/// MD5 implementation *
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hts_md5_context {
    _unused: [u8; 0],
}
extern "C" {
    /// @abstract   Intialises an MD5 context.
    ///  @discussion
    ///    The expected use is to allocate an hts_md5_context using
    ///    hts_md5_init().  This pointer is then passed into one or more calls
    ///    of hts_md5_update() to compute successive internal portions of the
    ///    MD5 sum, which can then be externalised as a full 16-byte MD5sum
    ///    calculation by calling hts_md5_final().  This can then be turned
    ///    into ASCII via hts_md5_hex().
    ///
    ///    To dealloate any resources created by hts_md5_init() call the
    ///    hts_md5_destroy() function.
    ///
    ///  @return     hts_md5_context pointer on success, NULL otherwise.
    pub fn hts_md5_init() -> *mut hts_md5_context;
}
extern "C" {
    /// @abstract Updates the context with the MD5 of the data.
    pub fn hts_md5_update(
        ctx: *mut hts_md5_context,
        data: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    /// @abstract Computes the final 128-bit MD5 hash from the given context
    pub fn hts_md5_final(digest: *mut ::std::os::raw::c_uchar, ctx: *mut hts_md5_context);
}
extern "C" {
    /// @abstract Resets an md5_context to the initial state, as returned
    ///            by hts_md5_init().
    pub fn hts_md5_reset(ctx: *mut hts_md5_context);
}
extern "C" {
    /// @abstract Converts a 128-bit MD5 hash into a 33-byte nul-termninated
    ///            hex string.
    pub fn hts_md5_hex(hex: *mut ::std::os::raw::c_char, digest: *const ::std::os::raw::c_uchar);
}
extern "C" {
    /// @abstract Deallocates any memory allocated by hts_md5_init.
    pub fn hts_md5_destroy(ctx: *mut hts_md5_context);
}
pub const cram_block_method_ERROR: cram_block_method = -1;
pub const cram_block_method_RAW: cram_block_method = 0;
pub const cram_block_method_GZIP: cram_block_method = 1;
pub const cram_block_method_BZIP2: cram_block_method = 2;
pub const cram_block_method_LZMA: cram_block_method = 3;
pub const cram_block_method_RANS: cram_block_method = 4;
pub const cram_block_method_RANS0: cram_block_method = 4;
pub const cram_block_method_RANS1: cram_block_method = 10;
pub const cram_block_method_GZIP_RLE: cram_block_method = 11;
pub type cram_block_method = i32;
pub const cram_content_type_CT_ERROR: cram_content_type = -1;
pub const cram_content_type_FILE_HEADER: cram_content_type = 0;
pub const cram_content_type_COMPRESSION_HEADER: cram_content_type = 1;
pub const cram_content_type_MAPPED_SLICE: cram_content_type = 2;
pub const cram_content_type_UNMAPPED_SLICE: cram_content_type = 3;
pub const cram_content_type_EXTERNAL: cram_content_type = 4;
pub const cram_content_type_CORE: cram_content_type = 5;
pub type cram_content_type = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SAM_hdr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cram_file_def {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cram_container {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cram_block {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cram_slice {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cram_metrics {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cram_block_slice_hdr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cram_block_compression_hdr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct refs_t {
    _unused: [u8; 0],
}
extern "C" {
    pub fn cram_fd_get_header(fd: *mut cram_fd) -> *mut SAM_hdr;
}
extern "C" {
    pub fn cram_fd_set_header(fd: *mut cram_fd, hdr: *mut SAM_hdr);
}
extern "C" {
    pub fn cram_fd_get_version(fd: *mut cram_fd) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cram_fd_set_version(fd: *mut cram_fd, vers: ::std::os::raw::c_int);
}
extern "C" {
    pub fn cram_major_vers(fd: *mut cram_fd) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cram_minor_vers(fd: *mut cram_fd) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cram_fd_get_fp(fd: *mut cram_fd) -> *mut hFILE;
}
extern "C" {
    pub fn cram_fd_set_fp(fd: *mut cram_fd, fp: *mut hFILE);
}
extern "C" {
    pub fn cram_container_get_length(c: *mut cram_container) -> i32;
}
extern "C" {
    pub fn cram_container_set_length(c: *mut cram_container, length: i32);
}
extern "C" {
    pub fn cram_container_get_num_blocks(c: *mut cram_container) -> i32;
}
extern "C" {
    pub fn cram_container_set_num_blocks(c: *mut cram_container, num_blocks: i32);
}
extern "C" {
    pub fn cram_container_get_landmarks(
        c: *mut cram_container,
        num_landmarks: *mut i32,
    ) -> *mut i32;
}
extern "C" {
    pub fn cram_container_set_landmarks(
        c: *mut cram_container,
        num_landmarks: i32,
        landmarks: *mut i32,
    );
}
extern "C" {
    pub fn cram_container_is_empty(fd: *mut cram_fd) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cram_block_get_content_id(b: *mut cram_block) -> i32;
}
extern "C" {
    pub fn cram_block_get_comp_size(b: *mut cram_block) -> i32;
}
extern "C" {
    pub fn cram_block_get_uncomp_size(b: *mut cram_block) -> i32;
}
extern "C" {
    pub fn cram_block_get_crc32(b: *mut cram_block) -> i32;
}
extern "C" {
    pub fn cram_block_get_data(b: *mut cram_block) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cram_block_get_content_type(b: *mut cram_block) -> cram_content_type;
}
extern "C" {
    pub fn cram_block_set_content_id(b: *mut cram_block, id: i32);
}
extern "C" {
    pub fn cram_block_set_comp_size(b: *mut cram_block, size: i32);
}
extern "C" {
    pub fn cram_block_set_uncomp_size(b: *mut cram_block, size: i32);
}
extern "C" {
    pub fn cram_block_set_crc32(b: *mut cram_block, crc: i32);
}
extern "C" {
    pub fn cram_block_set_data(b: *mut cram_block, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn cram_block_append(
        b: *mut cram_block,
        data: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cram_block_update_size(b: *mut cram_block);
}
extern "C" {
    pub fn cram_block_get_offset(b: *mut cram_block) -> usize;
}
extern "C" {
    pub fn cram_block_set_offset(b: *mut cram_block, offset: usize);
}
extern "C" {
    pub fn cram_block_size(b: *mut cram_block) -> u32;
}
extern "C" {
    pub fn cram_transcode_rg(
        in_: *mut cram_fd,
        out: *mut cram_fd,
        c: *mut cram_container,
        nrg: ::std::os::raw::c_int,
        in_rg: *mut ::std::os::raw::c_int,
        out_rg: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cram_copy_slice(
        in_: *mut cram_fd,
        out: *mut cram_fd,
        num_slice: i32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Tokenises a SAM header into a hash table.
    ///
    /// Also extracts a few bits on specific data types, such as @RG lines.
    ///
    /// @return
    /// Returns a SAM_hdr struct on success (free with sam_hdr_free());
    ///         NULL on failure
    pub fn sam_hdr_parse_(
        hdr: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut SAM_hdr;
}
extern "C" {
    /// Allocates a new cram_block structure with a specified content_type and
    /// id.
    ///
    /// @return
    /// Returns block pointer on success;
    ///         NULL on failure
    pub fn cram_new_block(
        content_type: cram_content_type,
        content_id: ::std::os::raw::c_int,
    ) -> *mut cram_block;
}
extern "C" {
    /// Reads a block from a cram file.
    ///
    /// @return
    /// Returns cram_block pointer on success;
    ///         NULL on failure
    pub fn cram_read_block(fd: *mut cram_fd) -> *mut cram_block;
}
extern "C" {
    /// Writes a CRAM block.
    ///
    /// @return
    /// Returns 0 on success;
    ///        -1 on failure
    pub fn cram_write_block(fd: *mut cram_fd, b: *mut cram_block) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Frees a CRAM block, deallocating internal data too.
    pub fn cram_free_block(b: *mut cram_block);
}
extern "C" {
    /// Uncompresses a CRAM block, if compressed.
    ///
    /// @return
    /// Returns 0 on success;
    ///        -1 on failure
    pub fn cram_uncompress_block(b: *mut cram_block) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Compresses a block.
    ///
    /// Compresses a block using one of two different zlib strategies. If we only
    /// want one choice set strat2 to be -1.
    ///
    /// The logic here is that sometimes Z_RLE does a better job than Z_FILTERED
    /// or Z_DEFAULT_STRATEGY on quality data. If so, we'd rather use it as it is
    /// significantly faster.
    ///
    /// @return
    /// Returns 0 on success;
    ///        -1 on failure
    pub fn cram_compress_block(
        fd: *mut cram_fd,
        b: *mut cram_block,
        metrics: *mut cram_metrics,
        method: ::std::os::raw::c_int,
        level: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Creates a new container, specifying the maximum number of slices
    /// and records permitted.
    ///
    /// @return
    /// Returns cram_container ptr on success;
    ///         NULL on failure
    pub fn cram_new_container(
        nrec: ::std::os::raw::c_int,
        nslice: ::std::os::raw::c_int,
    ) -> *mut cram_container;
}
extern "C" {
    pub fn cram_free_container(c: *mut cram_container);
}
extern "C" {
    /// Reads a container header.
    ///
    /// @return
    /// Returns cram_container on success;
    ///         NULL on failure or no container left (fd->err == 0).
    pub fn cram_read_container(fd: *mut cram_fd) -> *mut cram_container;
}
extern "C" {
    /// Writes a container structure.
    ///
    /// @return
    /// Returns 0 on success;
    ///        -1 on failure
    pub fn cram_write_container(fd: *mut cram_fd, h: *mut cram_container) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cram_store_container(
        fd: *mut cram_fd,
        c: *mut cram_container,
        dat: *mut ::std::os::raw::c_char,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cram_container_size(c: *mut cram_container) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Opens a CRAM file for read (mode "rb") or write ("wb").
    ///
    /// The filename may be "-" to indicate stdin or stdout.
    ///
    /// @return
    /// Returns file handle on success;
    ///         NULL on failure.
    pub fn cram_open(
        filename: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> *mut cram_fd;
}
extern "C" {
    /// Opens an existing stream for reading or writing.
    ///
    /// @return
    /// Returns file handle on success;
    ///         NULL on failure.
    pub fn cram_dopen(
        fp: *mut hFILE,
        filename: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> *mut cram_fd;
}
extern "C" {
    /// Closes a CRAM file.
    ///
    /// @return
    /// Returns 0 on success;
    ///        -1 on failure
    pub fn cram_close(fd: *mut cram_fd) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cram_seek(
        fd: *mut cram_fd,
        offset: off_t,
        whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cram_flush(fd: *mut cram_fd) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Checks for end of file on a cram_fd stream.
    ///
    /// @return
    /// Returns 0 if not at end of file
    ///         1 if we hit an expected EOF (end of range or EOF block)
    ///         2 for other EOF (end of stream without EOF block)
    pub fn cram_eof(fd: *mut cram_fd) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Sets options on the cram_fd.
    ///
    /// See CRAM_OPT_* definitions in hts.h.
    /// Use this immediately after opening.
    ///
    /// @return
    /// Returns 0 on success;
    ///        -1 on failure
    pub fn cram_set_option(fd: *mut cram_fd, opt: hts_fmt_option, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Sets options on the cram_fd.
    ///
    /// See CRAM_OPT_* definitions in hts.h.
    /// Use this immediately after opening.
    ///
    /// @return
    /// Returns 0 on success;
    ///        -1 on failure
    pub fn cram_set_voption(
        fd: *mut cram_fd,
        opt: hts_fmt_option,
        args: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Attaches a header to a cram_fd.
    ///
    /// This should be used when creating a new cram_fd for writing where
    /// we have an SAM_hdr already constructed (eg from a file we've read
    /// in).
    ///
    /// @return
    /// Returns 0 on success;
    ///        -1 on failure
    pub fn cram_set_header(fd: *mut cram_fd, hdr: *mut SAM_hdr) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Check if this file has a proper EOF block
    ///
    /// @return
    /// Returns 3 if the file is a version of CRAM that does not contain EOF blocks
    ///         2 if the file is a stream and thus unseekable
    ///         1 if the file contains an EOF block
    ///         0 if the file does not contain an EOF block
    ///        -1 if an error occured whilst reading the file or we could not seek back to where we were
    ///
    pub fn cram_check_EOF(fd: *mut cram_fd) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn int32_put_blk(b: *mut cram_block, val: i32) -> ::std::os::raw::c_int;
}
extern "C" {
    ///@}*/
    ////**@{ -------------------------------------------------------------------*/
    ////*! Deallocates all storage used by a SAM_hdr struct.
    ///
    /// This also decrements the header reference count. If after decrementing
    /// it is still non-zero then the header is assumed to be in use by another
    /// caller and the free is not done.
    ///
    /// This is a synonym for sam_hdr_dec_ref().
    pub fn sam_hdr_free(hdr: *mut SAM_hdr);
}
extern "C" {
    /// Returns the current length of the SAM_hdr in text form.
    ///
    /// Call sam_hdr_rebuild() first if editing has taken place.
    pub fn sam_hdr_length(hdr: *mut SAM_hdr) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Returns the string form of the SAM_hdr.
    ///
    /// Call sam_hdr_rebuild() first if editing has taken place.
    pub fn sam_hdr_str(hdr: *mut SAM_hdr) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    /// Add an @PG line.
    ///
    /// If we wish complete control over this use sam_hdr_add() directly. This
    /// function uses that, but attempts to do a lot of tedious house work for
    /// you too.
    ///
    /// - It will generate a suitable ID if the supplied one clashes.
    /// - It will generate multiple @PG records if we have multiple PG chains.
    ///
    /// Call it as per sam_hdr_add() with a series of key,value pairs ending
    /// in NULL.
    ///
    /// @return
    /// Returns 0 on success;
    ///        -1 on failure
    pub fn sam_hdr_add_PG(
        sh: *mut SAM_hdr,
        name: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// A function to help with construction of CL tags in @PG records.
    /// Takes an argc, argv pair and returns a single space-separated string.
    /// This string should be deallocated by the calling function.
    ///
    /// @return
    /// Returns malloced char * on success;
    ///         NULL on failure
    pub fn stringify_argv(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    /// Returns the refs_t structure used by a cram file handle.
    ///
    /// This may be used in conjunction with option CRAM_OPT_SHARED_REF to
    /// share reference memory between multiple file handles.
    ///
    /// @return
    /// Returns NULL if none exists or the file handle is not a CRAM file.
    pub fn cram_get_refs(fd: *mut htsFile) -> *mut refs_t;
}
/// @typedef
///@abstract Structure for the alignment header.
///@field n_targets   number of reference sequences
///@field l_text      length of the plain text in the header
///@field target_len  lengths of the reference sequences
///@field target_name names of the reference sequences
///@field text        plain text
///@field sdict       header dictionary
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bam_hdr_t {
    pub n_targets: i32,
    pub ignore_sam_err: i32,
    pub l_text: u32,
    pub target_len: *mut u32,
    pub cigar_tab: *mut i8,
    pub target_name: *mut *mut ::std::os::raw::c_char,
    pub text: *mut ::std::os::raw::c_char,
    pub sdict: *mut ::std::os::raw::c_void,
}
/// @typedef
///@abstract Structure for core alignment information.
///@field  tid     chromosome ID, defined by bam_hdr_t
///@field  pos     0-based leftmost coordinate
///@field  bin     bin calculated by bam_reg2bin()
///@field  qual    mapping quality
///@field  l_qname length of the query name
///@field  flag    bitwise flag
///@field  l_extranul length of extra NULs between qname & cigar (for alignment)
///@field  n_cigar number of CIGAR operations
///@field  l_qseq  length of the query sequence (read)
///@field  mtid    chromosome ID of next read in template, defined by bam_hdr_t
///@field  mpos    0-based leftmost coordinate of next read in template
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bam1_core_t {
    pub tid: i32,
    pub pos: i32,
    pub bin: u16,
    pub qual: u8,
    pub l_qname: u8,
    pub flag: u16,
    pub unused1: u8,
    pub l_extranul: u8,
    pub n_cigar: u32,
    pub l_qseq: i32,
    pub mtid: i32,
    pub mpos: i32,
    pub isize: i32,
}
/// @typedef
///@abstract Structure for one alignment.
///@field  core       core information about the alignment
///@field  l_data     current length of bam1_t::data
///@field  m_data     maximum length of bam1_t::data
///@field  data       all variable-length data, concatenated; structure: qname-cigar-seq-qual-aux
///
///@discussion Notes:
///
///1. qname is terminated by one to four NULs, so that the following
///cigar data is 32-bit aligned; core.l_qname includes these trailing NULs,
///while core.l_extranul counts the excess NULs (so 0 <= l_extranul <= 3).
///2. l_qseq is calculated from the total length of an alignment block
///on reading or from CIGAR.
///3. cigar data is encoded 4 bytes per CIGAR operation.
///4. seq is nybble-encoded according to bam_nt16_table.
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bam1_t {
    pub core: bam1_core_t,
    pub l_data: ::std::os::raw::c_int,
    pub m_data: u32,
    pub data: *mut u8,
    pub id: u64,
}
extern "C" {
    /// BAM I/O ***
    pub fn bam_hdr_init() -> *mut bam_hdr_t;
}
extern "C" {
    pub fn bam_hdr_read(fp: *mut BGZF) -> *mut bam_hdr_t;
}
extern "C" {
    pub fn bam_hdr_write(fp: *mut BGZF, h: *const bam_hdr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bam_hdr_destroy(h: *mut bam_hdr_t);
}
extern "C" {
    pub fn bam_name2id(
        h: *mut bam_hdr_t,
        ref_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bam_hdr_dup(h0: *const bam_hdr_t) -> *mut bam_hdr_t;
}
extern "C" {
    pub fn bam_init1() -> *mut bam1_t;
}
extern "C" {
    pub fn bam_destroy1(b: *mut bam1_t);
}
extern "C" {
    pub fn bam_read1(fp: *mut BGZF, b: *mut bam1_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bam_write1(fp: *mut BGZF, b: *const bam1_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bam_copy1(bdst: *mut bam1_t, bsrc: *const bam1_t) -> *mut bam1_t;
}
extern "C" {
    pub fn bam_dup1(bsrc: *const bam1_t) -> *mut bam1_t;
}
extern "C" {
    pub fn bam_cigar2qlen(
        n_cigar: ::std::os::raw::c_int,
        cigar: *const u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bam_cigar2rlen(
        n_cigar: ::std::os::raw::c_int,
        cigar: *const u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    ///@abstract Calculate the rightmost base position of an alignment on the
    ///reference genome.
    ///
    ///@param  b  pointer to an alignment
    ///@return    the coordinate of the first base after the alignment, 0-based
    ///
    ///@discussion For a mapped read, this is just b->core.pos + bam_cigar2rlen.
    ///For an unmapped read (either according to its flags or if it has no cigar
    ///string), we return b->core.pos + 1 by convention.
    pub fn bam_endpos(b: *const bam1_t) -> i32;
}
extern "C" {
    pub fn bam_str2flag(str: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    /// returns negative value on error
    pub fn bam_flag2str(flag: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    /// Load a BAM (.csi or .bai) or CRAM (.crai) index file
    ///** @param fp  File handle of the data file whose index is being opened
    ///@param fn  BAM/CRAM/etc filename to search alongside for the index file
    ///@return  The index, or NULL if an error occurred.
    ///*/
    pub fn sam_index_load(fp: *mut htsFile, fn_: *const ::std::os::raw::c_char) -> *mut hts_idx_t;
}
extern "C" {
    /// Load a specific BAM (.csi or .bai) or CRAM (.crai) index file
    ///** @param fp     File handle of the data file whose index is being opened
    ///@param fn     BAM/CRAM/etc data file filename
    ///@param fnidx  Index filename, or NULL to search alongside @a fn
    ///@return  The index, or NULL if an error occurred.
    ///*/
    pub fn sam_index_load2(
        fp: *mut htsFile,
        fn_: *const ::std::os::raw::c_char,
        fnidx: *const ::std::os::raw::c_char,
    ) -> *mut hts_idx_t;
}
extern "C" {
    /// Generate and save an index file
    ///** @param fn        Input BAM/etc filename, to which .csi/etc will be added
    ///@param min_shift Positive to generate CSI, or 0 to generate BAI
    ///@return  0 if successful, or negative if an error occurred (usually -1; or
    ///-2: opening fn failed; -3: format not indexable; -4:
    ///failed to create and/or save the index)
    ///*/
    pub fn sam_index_build(
        fn_: *const ::std::os::raw::c_char,
        min_shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Generate and save an index to a specific file
    ///** @param fn        Input BAM/CRAM/etc filename
    ///@param fnidx     Output filename, or NULL to add .bai/.csi/etc to @a fn
    ///@param min_shift Positive to generate CSI, or 0 to generate BAI
    ///@return  0 if successful, or negative if an error occurred (see
    ///sam_index_build for error codes)
    ///*/
    pub fn sam_index_build2(
        fn_: *const ::std::os::raw::c_char,
        fnidx: *const ::std::os::raw::c_char,
        min_shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sam_index_build3(
        fn_: *const ::std::os::raw::c_char,
        fnidx: *const ::std::os::raw::c_char,
        min_shift: ::std::os::raw::c_int,
        nthreads: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sam_itr_queryi(
        idx: *const hts_idx_t,
        tid: ::std::os::raw::c_int,
        beg: ::std::os::raw::c_int,
        end: ::std::os::raw::c_int,
    ) -> *mut hts_itr_t;
}
extern "C" {
    pub fn sam_itr_querys(
        idx: *const hts_idx_t,
        hdr: *mut bam_hdr_t,
        region: *const ::std::os::raw::c_char,
    ) -> *mut hts_itr_t;
}
extern "C" {
    pub fn sam_itr_regions(
        idx: *const hts_idx_t,
        hdr: *mut bam_hdr_t,
        reglist: *mut hts_reglist_t,
        regcount: ::std::os::raw::c_uint,
    ) -> *mut hts_itr_multi_t;
}
extern "C" {
    pub fn sam_open_mode(
        mode: *mut ::std::os::raw::c_char,
        fn_: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sam_open_mode_opts(
        fn_: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type samFile = htsFile;
extern "C" {
    pub fn sam_hdr_parse(
        l_text: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
    ) -> *mut bam_hdr_t;
}
extern "C" {
    pub fn sam_hdr_read(fp: *mut samFile) -> *mut bam_hdr_t;
}
extern "C" {
    pub fn sam_hdr_write(fp: *mut samFile, h: *const bam_hdr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sam_parse1(
        s: *mut kstring_t,
        h: *mut bam_hdr_t,
        b: *mut bam1_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sam_format1(
        h: *const bam_hdr_t,
        b: *const bam1_t,
        str: *mut kstring_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    ///  @return >= 0 on successfully reading a new record, -1 on end of stream, < -1 on error
    pub fn sam_read1(fp: *mut samFile, h: *mut bam_hdr_t, b: *mut bam1_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sam_write1(
        fp: *mut samFile,
        h: *const bam_hdr_t,
        b: *const bam1_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Return a pointer to an aux record
    ///** @param b   Pointer to the bam record
    ///@param tag Desired aux tag
    ///@return Pointer to the tag data, or NULL if tag is not present or on error
    ///If the tag is not present, this function returns NULL and sets errno to
    ///ENOENT.  If the bam record's aux data is corrupt (either a tag has an
    ///invalid type, or the last record is incomplete) then errno is set to
    ///EINVAL and NULL is returned.
    ///*/
    pub fn bam_aux_get(b: *const bam1_t, tag: *const ::std::os::raw::c_char) -> *mut u8;
}
extern "C" {
    /// Get an integer aux value
    ///** @param s Pointer to the tag data, as returned by bam_aux_get()
    ///@return The value, or 0 if the tag was not an integer type
    ///If the tag is not an integer type, errno is set to EINVAL.  This function
    ///will not return the value of floating-point tags.
    ///*/
    pub fn bam_aux2i(s: *const u8) -> i64;
}
extern "C" {
    /// Get an integer aux value
    ///** @param s Pointer to the tag data, as returned by bam_aux_get()
    ///@return The value, or 0 if the tag was not an integer type
    ///If the tag is not an numeric type, errno is set to EINVAL.  The value of
    ///integer flags will be returned cast to a double.
    ///*/
    pub fn bam_aux2f(s: *const u8) -> f64;
}
extern "C" {
    /// Get a character aux value
    ///** @param s Pointer to the tag data, as returned by bam_aux_get().
    ///@return The value, or 0 if the tag was not a character ('A') type
    ///If the tag is not a character type, errno is set to EINVAL.
    ///*/
    pub fn bam_aux2A(s: *const u8) -> ::std::os::raw::c_char;
}
extern "C" {
    /// Get a string aux value
    ///** @param s Pointer to the tag data, as returned by bam_aux_get().
    ///@return Pointer to the string, or NULL if the tag was not a string type
    ///If the tag is not a string type ('Z' or 'H'), errno is set to EINVAL.
    ///*/
    pub fn bam_aux2Z(s: *const u8) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    /// Get the length of an array-type ('B') tag
    ///** @param s Pointer to the tag data, as returned by bam_aux_get().
    ///@return The length of the array, or 0 if the tag is not an array type.
    ///If the tag is not an array type, errno is set to EINVAL.
    ///*/
    pub fn bam_auxB_len(s: *const u8) -> u32;
}
extern "C" {
    /// Get an integer value from an array-type tag
    ///** @param s   Pointer to the tag data, as returned by bam_aux_get().
    ///@param idx 0-based Index into the array
    ///@return The idx'th value, or 0 on error.
    ///If the array is not an integer type, errno is set to EINVAL.  If idx
    ///is greater than or equal to  the value returned by bam_auxB_len(s),
    ///errno is set to ERANGE.  In both cases, 0 will be returned.
    ///*/
    pub fn bam_auxB2i(s: *const u8, idx: u32) -> i64;
}
extern "C" {
    /// Get a floating-point value from an array-type tag
    ///** @param s   Pointer to the tag data, as returned by bam_aux_get().
    ///@param idx 0-based Index into the array
    ///@return The idx'th value, or 0.0 on error.
    ///If the array is not a numeric type, errno is set to EINVAL.  This can
    ///only actually happen if the input record has an invalid type field.  If
    ///idx is greater than or equal to  the value returned by bam_auxB_len(s),
    ///errno is set to ERANGE.  In both cases, 0.0 will be returned.
    ///*/
    pub fn bam_auxB2f(s: *const u8, idx: u32) -> f64;
}
extern "C" {
    pub fn bam_aux_append(
        b: *mut bam1_t,
        tag: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        data: *const u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bam_aux_del(b: *mut bam1_t, s: *mut u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bam_aux_update_str(
        b: *mut bam1_t,
        tag: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        data: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
/// @typedef
///@abstract Generic pileup 'client data'.
///
///@discussion The pileup iterator allows setting a constructor and
///destructor function, which will be called every time a sequence is
///fetched and discarded.  This permits caching of per-sequence data in
///a tidy manner during the pileup process.  This union is the cached
///data to be manipulated by the "client" (the caller of pileup).
#[repr(C)]
#[derive(Copy, Clone)]
pub union bam_pileup_cd {
    pub p: *mut ::std::os::raw::c_void,
    pub i: i64,
    pub f: f64,
    _bindgen_union_align: u64,
}
/// @typedef
///@abstract Structure for one alignment covering the pileup position.
///@field  b          pointer to the alignment
///@field  qpos       position of the read base at the pileup site, 0-based
///@field  indel      indel length; 0 for no indel, positive for ins and negative for del
///@field  level      the level of the read in the "viewer" mode
///@field  is_del     1 iff the base on the padded read is a deletion
///@field  is_head    ???
///@field  is_tail    ???
///@field  is_refskip ???
///@field  aux        ???
///
///@discussion See also bam_plbuf_push() and bam_lplbuf_push(). The
///difference between the two functions is that the former does not
///set bam_pileup1_t::level, while the later does. Level helps the
///implementation of alignment viewers, but calculating this has some
///overhead.
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bam_pileup1_t {
    pub b: *mut bam1_t,
    pub qpos: i32,
    pub indel: ::std::os::raw::c_int,
    pub level: ::std::os::raw::c_int,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub cd: bam_pileup_cd,
}
impl bam_pileup1_t {
    #[inline]
    pub fn is_del(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_del(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_head(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_head(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_tail(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_tail(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_refskip(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_refskip(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn aux(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_aux(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        is_del: u32,
        is_head: u32,
        is_tail: u32,
        is_refskip: u32,
        aux: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let is_del: u32 = unsafe { ::std::mem::transmute(is_del) };
            is_del as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let is_head: u32 = unsafe { ::std::mem::transmute(is_head) };
            is_head as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let is_tail: u32 = unsafe { ::std::mem::transmute(is_tail) };
            is_tail as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let is_refskip: u32 = unsafe { ::std::mem::transmute(is_refskip) };
            is_refskip as u64
        });
        __bindgen_bitfield_unit.set(4usize, 28u8, {
            let aux: u32 = unsafe { ::std::mem::transmute(aux) };
            aux as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type bam_plp_auto_f = ::std::option::Option<
    unsafe extern "C" fn(data: *mut ::std::os::raw::c_void, b: *mut bam1_t)
        -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __bam_plp_t {
    _unused: [u8; 0],
}
pub type bam_plp_t = *mut __bam_plp_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __bam_mplp_t {
    _unused: [u8; 0],
}
pub type bam_mplp_t = *mut __bam_mplp_t;
extern "C" {
    ///  bam_plp_init() - sets an iterator over multiple
    ///  @func:      see mplp_func in bam_plcmd.c in samtools for an example. Expected return
    ///              status: 0 on success, -1 on end, < -1 on non-recoverable errors
    ///  @data:      user data to pass to @func
    pub fn bam_plp_init(func: bam_plp_auto_f, data: *mut ::std::os::raw::c_void) -> bam_plp_t;
}
extern "C" {
    pub fn bam_plp_destroy(iter: bam_plp_t);
}
extern "C" {
    pub fn bam_plp_push(iter: bam_plp_t, b: *const bam1_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bam_plp_next(
        iter: bam_plp_t,
        _tid: *mut ::std::os::raw::c_int,
        _pos: *mut ::std::os::raw::c_int,
        _n_plp: *mut ::std::os::raw::c_int,
    ) -> *const bam_pileup1_t;
}
extern "C" {
    pub fn bam_plp_auto(
        iter: bam_plp_t,
        _tid: *mut ::std::os::raw::c_int,
        _pos: *mut ::std::os::raw::c_int,
        _n_plp: *mut ::std::os::raw::c_int,
    ) -> *const bam_pileup1_t;
}
extern "C" {
    pub fn bam_plp_set_maxcnt(iter: bam_plp_t, maxcnt: ::std::os::raw::c_int);
}
extern "C" {
    pub fn bam_plp_reset(iter: bam_plp_t);
}
extern "C" {
    ///  bam_plp_constructor() - sets a callback to initialise any per-pileup1_t fields.
    ///  @plp:       The bam_plp_t initialised using bam_plp_init.
    ///  @func:      The callback function itself.  When called, it is given the
    ///              data argument (specified in bam_plp_init), the bam structure and
    ///              a pointer to a locally allocated bam_pileup_cd union.  This union
    ///              will also be present in each bam_pileup1_t created.
    pub fn bam_plp_constructor(
        plp: bam_plp_t,
        func: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                b: *const bam1_t,
                cd: *mut bam_pileup_cd,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn bam_plp_destructor(
        plp: bam_plp_t,
        func: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                b: *const bam1_t,
                cd: *mut bam_pileup_cd,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn bam_mplp_init(
        n: ::std::os::raw::c_int,
        func: bam_plp_auto_f,
        data: *mut *mut ::std::os::raw::c_void,
    ) -> bam_mplp_t;
}
extern "C" {
    ///  bam_mplp_init_overlaps() - if called, mpileup will detect overlapping
    ///  read pairs and for each base pair set the base quality of the
    ///  lower-quality base to zero, thus effectively discarding it from
    ///  calling. If the two bases are identical, the quality of the other base
    ///  is increased to the sum of their qualities (capped at 200), otherwise
    ///  it is multiplied by 0.8.
    pub fn bam_mplp_init_overlaps(iter: bam_mplp_t);
}
extern "C" {
    pub fn bam_mplp_destroy(iter: bam_mplp_t);
}
extern "C" {
    pub fn bam_mplp_set_maxcnt(iter: bam_mplp_t, maxcnt: ::std::os::raw::c_int);
}
extern "C" {
    pub fn bam_mplp_auto(
        iter: bam_mplp_t,
        _tid: *mut ::std::os::raw::c_int,
        _pos: *mut ::std::os::raw::c_int,
        n_plp: *mut ::std::os::raw::c_int,
        plp: *mut *const bam_pileup1_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bam_mplp_reset(iter: bam_mplp_t);
}
extern "C" {
    pub fn bam_mplp_constructor(
        iter: bam_mplp_t,
        func: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                b: *const bam1_t,
                cd: *mut bam_pileup_cd,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn bam_mplp_destructor(
        iter: bam_mplp_t,
        func: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                b: *const bam1_t,
                cd: *mut bam_pileup_cd,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    /// BAQ calculation and realignment *
    pub fn sam_cap_mapq(
        b: *mut bam1_t,
        ref_: *const ::std::os::raw::c_char,
        ref_len: ::std::os::raw::c_int,
        thres: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sam_prob_realn(
        b: *mut bam1_t,
        ref_: *const ::std::os::raw::c_char,
        ref_len: ::std::os::raw::c_int,
        flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
